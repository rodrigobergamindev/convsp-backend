// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Worker {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique
  photo String?
  status Status @default(ATIVO)
  name  String
  role Role @default(UNDEFINED)
  rg String @unique
  cpf String @unique
  birth DateTime
  consagration DateTime?
  phoneNumber String?
  email String?
  document Document[]
  address WorkerAddress?
  church Church? @relation(fields: [churchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  churchId String? @unique @db.ObjectId

  president Board[] @relation("President")
  leader Board[] @relation("Leader")
  superintendenceId String @unique @db.ObjectId 
  superintendence Superintendence @relation(fields: [superintendenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)


  annotations WorkerAnnotation[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
 
}


model Document {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key String @unique
  url String
  worker Worker @relation(fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workerId String @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model ChurchDocument {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key String @unique
  url String
  church Church @relation(fields: [churchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  churchId String @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}


model Church  {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique
  situacao Situacao @default(ATIVA)
  name  String
  cnpj String?
  templo Templo? @default(PROPRIO)
  membros Int?
  address ChurchAddress?
  phoneNumber String?
  email String?
  document ChurchDocument[]
  annotations ChurchAnnotation[]

  superintendence Superintendence? @relation(name: "ChurchesSuperintendence", fields: [superintendenceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  superintendenceId String? @unique @db.ObjectId 

  
  workers Worker[]
  board Board?

  headquarterId String? @unique @db.ObjectId
  headquarter   Church?   @relation(name:"Headquarter", fields: [headquarterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  congregations Church[] @relation(name: "Headquarter")

  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  
}


model Board {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  validity String

  church Church @relation(fields: [churchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  churchId String @unique @db.ObjectId

  president Worker @relation(name: "President", fields: [presidentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presidentId String @unique @db.ObjectId

  leader Worker @relation(name: "Leader", fields: [leaderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leaderId String @unique @db.ObjectId

}

model Superintendence {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique 
  church Church[] @relation(name:"ChurchesSuperintendence")

  
  superintendent Worker?
  region String
}

model WorkerAddress {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  place String
  number String
  complement String?
  district String
  city String
  state String
  zip_code String
  worker   Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workerId String @unique @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model ChurchAddress {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  place String
  number String
  complement String?
  district String
  city String
  state String
  zip_code String
  church   Church   @relation(fields: [churchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  churchId String @unique @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}


model ChurchAnnotation {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  church Church @relation(fields: [churchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  churchId String @unique @db.ObjectId
  title String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model WorkerAnnotation {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  worker Worker @relation(fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workerId String @unique @db.ObjectId

  title String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

enum Status {
  ATIVO
  DESATIVADO
  INATIVO
  DESLIGADO
}

enum Templo {
  PROPRIO
  ALUGADO
  OUTRO
}

enum Situacao {
  DESATIVADA
  ATIVA
}

enum Role {
  UNDEFINED
  CANDIDATO
  PRESBITERO
  MISSIONARIA
  MISSIONARIO
  EVANGELISTA
  PASTOR
  DIACONO
  DIACONISA
}