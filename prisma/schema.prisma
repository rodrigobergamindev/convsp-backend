// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Worker {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique @db.ObjectId
  photo String?
  status Status @default(ATIVO)
  name  String
  role Role @default(UNDEFINED)
  rg String @unique
  cpf String @unique
  birth DateTime
  consagration DateTime?
  phoneNumber String?
  email String?
  document Document[]
  address WorkerAddress?
  church Church @relation(fields: [churchCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  churchCode String @unique @db.ObjectId 
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
 
}


model Document {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key String @unique
  url String
  worker Worker @relation(fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workerId String @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}


model Church {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique @db.ObjectId
  photo String?
  status Status? @default(ATIVO)
  name  String?
  role Role? @default(UNDEFINED)
  rg String?
  cpf String?
  birth DateTime?
  consagration DateTime?
  address ChurchAddress?
  phoneNumber String?
  email String?
  documentsUrl String[]

  workers Worker[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  
}

model WorkerAddress {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  place String
  number String
  complement String?
  district String
  city String
  state String
  zip_code String
  worker   Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workerId String @unique @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model ChurchAddress {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  place String
  number String
  complement String?
  district String
  city String
  state String
  zip_code String
  church   Church   @relation(fields: [churchId], references: [id])
  churchId String @unique @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

enum Status {
  ATIVO
  DESATIVADO
  INATIVO
  DESLIGADO
}

enum Role {
  UNDEFINED
  CANDIDATO
  PRESBITERO
  MISSIONARIA
  EVANGELISTA
  PASTOR
}